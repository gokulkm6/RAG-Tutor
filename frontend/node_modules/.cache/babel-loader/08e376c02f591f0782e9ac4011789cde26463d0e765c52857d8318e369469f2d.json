{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\RAG Tutor\\\\frontend\\\\src\\\\components\\\\Mascot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ChatWindow from \"./ChatWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:8000\";\nfunction Mascot() {\n  _s();\n  const [listening, setListening] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const recognitionRef = useRef(null);\n\n  // Initialize Speech Recognition\n  useEffect(() => {\n    if (!(\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window)) {\n      alert(\"Speech Recognition not supported in this browser.\");\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.lang = \"en-US\";\n    recognition.onresult = e => {\n      const transcript = e.results[0][0].transcript;\n      handleUserInput(transcript);\n    };\n    recognition.onend = () => setListening(false);\n    recognitionRef.current = recognition;\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current) {\n      setListening(true);\n      recognitionRef.current.start();\n    }\n  };\n  const handleUserInput = async text => {\n    setMessages(prev => [...prev, {\n      role: \"user\",\n      text\n    }]);\n    const res = await fetch(`${API_BASE}/chat`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: text\n      })\n    });\n    const data = await res.json();\n    setMessages(prev => [...prev, {\n      role: \"assistant\",\n      text: data.text,\n      emotion: data.emotion\n    }]);\n    speak(data.text);\n    triggerEmotion(data.emotion);\n  };\n  const speak = text => {\n    if (!(\"speechSynthesis\" in window)) return;\n    const utter = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.cancel();\n    window.speechSynthesis.speak(utter);\n  };\n  const triggerEmotion = emotion => {\n    const el = document.getElementById(\"mascot-face\");\n    el.className = \"face \" + emotion;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mascot-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mascot-face\",\n      className: \"face neutral\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"eyes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mouth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onMouseDown: startListening,\n      children: listening ? \"üé§ Listening...\" : \"üéôÔ∏è Hold to Talk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Mascot, \"qXqTy9peZg8HpBKNepr9Yov5GI8=\");\n_c = Mascot;\nexport default Mascot;\nvar _c;\n$RefreshReg$(_c, \"Mascot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatWindow","jsxDEV","_jsxDEV","API_BASE","Mascot","_s","listening","setListening","messages","setMessages","recognitionRef","window","alert","SpeechRecognition","webkitSpeechRecognition","recognition","lang","onresult","e","transcript","results","handleUserInput","onend","current","startListening","start","text","prev","role","res","fetch","method","headers","body","JSON","stringify","query","data","json","emotion","speak","triggerEmotion","utter","SpeechSynthesisUtterance","speechSynthesis","cancel","el","document","getElementById","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","_c","$RefreshReg$"],"sources":["D:/Projects/RAG Tutor/frontend/src/components/Mascot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ChatWindow from \"./ChatWindow\";\r\n\r\nconst API_BASE = \"http://localhost:8000\";\r\n\r\nfunction Mascot() {\r\n  const [listening, setListening] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const recognitionRef = useRef(null);\r\n\r\n  // Initialize Speech Recognition\r\n  useEffect(() => {\r\n    if (!(\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window)) {\r\n      alert(\"Speech Recognition not supported in this browser.\");\r\n      return;\r\n    }\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = \"en-US\";\r\n    recognition.onresult = (e) => {\r\n      const transcript = e.results[0][0].transcript;\r\n      handleUserInput(transcript);\r\n    };\r\n    recognition.onend = () => setListening(false);\r\n    recognitionRef.current = recognition;\r\n  }, []);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current) {\r\n      setListening(true);\r\n      recognitionRef.current.start();\r\n    }\r\n  };\r\n\r\n  const handleUserInput = async (text) => {\r\n    setMessages((prev) => [...prev, { role: \"user\", text }]);\r\n    const res = await fetch(`${API_BASE}/chat`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ query: text }),\r\n    });\r\n    const data = await res.json();\r\n    setMessages((prev) => [...prev, { role: \"assistant\", text: data.text, emotion: data.emotion }]);\r\n    speak(data.text);\r\n    triggerEmotion(data.emotion);\r\n  };\r\n\r\n  const speak = (text) => {\r\n    if (!(\"speechSynthesis\" in window)) return;\r\n    const utter = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.cancel();\r\n    window.speechSynthesis.speak(utter);\r\n  };\r\n\r\n  const triggerEmotion = (emotion) => {\r\n    const el = document.getElementById(\"mascot-face\");\r\n    el.className = \"face \" + emotion;\r\n  };\r\n\r\n  return (\r\n    <div className=\"mascot-wrapper\">\r\n      <div id=\"mascot-face\" className=\"face neutral\">\r\n        <div className=\"eyes\"></div>\r\n        <div className=\"mouth\"></div>\r\n      </div>\r\n      <button onMouseDown={startListening}>\r\n        {listening ? \"üé§ Listening...\" : \"üéôÔ∏è Hold to Talk\"}\r\n      </button>\r\n      <ChatWindow messages={messages} />\r\n    </div>\r\n  );\r\n}\r\nexport default Mascot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}